First reflection.

Never new control prompt had a file compare fundtion in it. FC command! Huh.

Second reflection.

Having access to the entire history of a file could make you more efficient as a programmer as you can see where things were changed, what went wrong etc. You also have the ability to work with others and integrate chunks of code more easily.

Third reflection

Having manual commits gives greater flexibility and gives the commits the ability to be more meaningful. If you just had automatic commits, while you'd never miss anything, you would have a lot of commits that were meaningless.

Fourth reflection
Allowing mulitple files in one commit works for the programming environment. Often, you are likely to have tightly related files that require updates at the same time. This is less likely in something like google docs.

Fifth reflection
Using the command git log is usefull as you can see the whole change log for the repository (this of course means that you have meaningful commit messages). Using git diff command is a ok. I guess. I'm not loving the whole copy and paste ids thing - especially in the git bash environment...

Must be a better way to copy and paste then using the context menu.

Sixth reflection
Clearly your confidence is increased when you know you can simply roll back your code via a GIT checkout statement. You would be much more likely to try different things. 

Seventh reflection
I want to use GIT for version control on the systems that I build. I've used SVN, but that seems like it's out of fashion, and we were never really taught how to use it beyond the basics. So this course seems like a good idea.

Just some final notes from the first section...

Four main commands learnt:
GIT DIFF
GIT CLONE
GIT LOG
GIT CHECKOUT

